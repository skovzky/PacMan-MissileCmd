var DIR_LEFT  = 0
var DIR_RIGHT = 1
var DIR_UP    = 2
var DIR_DOWN  = 3
var SPEED     = 2
enchant();

window.onload = function(){
    var game = new Core(168, 214);
    game.fps = 32;
    game.preload("PC_SPRITE_3.png", "PC_MAP_2.png");
	game.onload = function(){
		var map = new Map(8 , 8);
		map.image = game.assets['PC_MAP_2.png'];
		map.loadData([
		[1 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,7 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,2 ],
		[6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ],
		[6 ,0 ,1 ,5 ,2 ,0 ,1 ,5 ,2 ,0 ,6 ,0 ,1 ,5 ,2 ,0 ,1 ,5 ,2 ,0 ,6 ],
		[6 ,0 ,6 ,0 ,6 ,0 ,6 ,0 ,6 ,0 ,6 ,0 ,6 ,0 ,6 ,0 ,6 ,0 ,6 ,0 ,6 ],
		[6 ,0 ,3 ,5 ,4 ,0 ,3 ,5 ,4 ,0 ,10,0 ,3 ,5 ,4 ,0 ,3 ,5 ,4 ,0 ,6 ],
		[6 ,0 ,0 ,0 ,0 ,0 ,0 ,0, 0, 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ],
		[6 ,0 ,1 ,5 ,2 ,0 ,11,0 ,1 ,5 ,5 ,5 ,2 ,0 ,11,0 ,1 ,5 ,2 ,0 ,6 ],
		[6 ,0 ,3 ,5 ,4 ,0 ,6 ,0 ,3 ,5 ,7 ,5 ,4 ,0 ,6 ,0 ,3 ,5 ,4 ,0 ,6 ],
		[6 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,6 ],
		[3 ,5 ,5 ,5 ,2 ,0 ,12,5 ,9 ,0 ,10,0 ,8 ,5 ,13,0 ,1 ,5 ,5 ,5 ,4 ],
		[0 ,0 ,0 ,0 ,6 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,6 ,0 ,0 ,0 ,0 ],
		[0 ,0 ,0 ,0 ,6 ,0 ,6 ,0 ,1 ,5 ,5 ,5 ,2 ,0 ,6 ,0 ,6 ,0 ,0 ,0 ,0 ],
		[8 ,5 ,5 ,5 ,4 ,0 ,10,0 ,6 ,0 ,0 ,0 ,6 ,0 ,10,0 ,3 ,5 ,5 ,5 ,9 ],
		[0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,5 ,5 ,5 ,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ],
		[8 ,5 ,5 ,5 ,2 ,0 ,11,0 ,0 ,0 ,0 ,0 ,0 ,0 ,11,0 ,1 ,5 ,5 ,5 ,9 ],
		[0 ,0 ,0 ,0 ,6 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,6 ,0 ,0 ,0 ,0 ],
		[0 ,0 ,0 ,0 ,6 ,0 ,6 ,0 ,1 ,5 ,5 ,5 ,2 ,0 ,6 ,0 ,6 ,0 ,0 ,0 ,0 ],
		[1 ,5 ,5 ,5 ,4 ,0 ,10,0 ,3 ,5 ,7 ,5 ,4 ,0 ,10,0 ,3 ,5 ,5 ,5 ,2 ],
		[6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ],
		[6 ,0 ,8 ,5 ,2 ,0 ,8 ,5 ,9 ,0 ,10,0 ,8 ,5, 9 ,0 ,1 ,5 ,9 ,0 ,6 ],
		[6 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,6 ],
		[12,5 ,2 ,0 ,6 ,0 ,11,0 ,1 ,5 ,5 ,5 ,2 ,0 ,11,0 ,6 ,0 ,1 ,5 ,13],
		[12,5 ,4 ,0 ,10,0 ,6 ,0 ,3 ,5 ,7 ,5 ,4 ,0 ,6 ,0 ,10,0 ,3 ,5 ,13],
		[6 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,6 ],
		[6 ,0 ,8 ,5 ,5 ,5 ,14,5 ,9 ,0 ,10,0 ,8 ,5 ,14,5 ,5 ,5 ,9 ,0 ,6 ],
		[6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ],
		[3 ,5 ,5 ,5 ,5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ,5 ,5 ,5 ,5 ,5 ,4 ]
	],[
		[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
		[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,]
	]);
	map.collisionData = [
		[1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ],
		[1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ],
		[1 ,0 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ],
		[1 ,0 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ],
		[1 ,0 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ],
		[1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ],
		[1 ,0 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ],
		[1 ,0 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ],
		[1 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,1 ],
		[1 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ],
		[1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ],
		[1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ],
		[1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ],
		[0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ],
		[1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ],
		[1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ],
		[1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ],
		[1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ],
		[1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ],
		[1 ,0 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1, 1 ,0 ,1 ,1 ,1 ,0 ,1 ],
		[1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ],
		[1 ,1 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ],
		[1 ,1 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ],
		[1 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,1 ],
		[1 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ],
		[1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ],
		[1 ,1 ,1 ,1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ,1 ,1 ,1 ,1 ,1 ,1 ]
	];
		game.rootScene.addChild(map);
        var pc = new Sprite(8, 8);
        pc.image = game.assets["PC_SPRITE_3.png"];
        pc.x = 8;
        pc.y = 8;
        pc.frame = 4;
		pc.dir = DIR_RIGHT
		pc.anim = [
			1 , 2,  //Left
			4 , 2,  //Right
			7 , 2,  //Up
			10, 2,  //Down
			];
        game.rootScene.addChild(pc);
		pc.addEventListener("enterframe", function(){
		pc.frame = pc.anim[pc.dir *2 + (pc.age % 2)];
			if(game.input.up){
				pc.dir = DIR_UP;
			}
			else if (game.input.down) {
				pc.dir = DIR_DOWN;
			}
			else if (game.input.left) {
				pc.dir = DIR_LEFT;
			}
			else if (game.input.right) {
				pc.dir = DIR_RIGHT
			}
			console.log(pc.dir);
			if (pc.dir == DIR_UP){
				pc.y -= SPEED;
				if (map.hitTest(pc.x + 4, pc.y + 0))
                    pc.y += SPEED;
				}
			else if (pc.dir == DIR_DOWN){
				pc.y += SPEED;
				if (map.hitTest(pc.x + 4, pc.y + 8))
                    pc.y -= SPEED;
				}
			else if (pc.dir == DIR_LEFT){
				pc.x -= SPEED;
				if (map.hitTest(pc.x + 0, pc.y + 4))
                    pc.x += SPEED;
				}
			else if (pc.dir == DIR_RIGHT){
				pc.x += SPEED;
				if (map.hitTest(pc.x + 8, pc.y + 4))
                    pc.x -= SPEED;
				}
			if (pc.x > 214)
				pc.x = 0;
			if(pc.x < 0)
				pc.x = 214;
		});
	//	var dot = new Sprite(8 , 8);
	//	dot.image = game.assets["PC_SPRITE_3.png"];
	//	dot.x = 16;
	//	dot.y =  8;
	//	dot.frame = 5;
		var Dot = enchant.Class.create(enchant.Sprite,{
            initialize:function(x,y){
                enchant.Sprite.call(this, 8, 8);
                this.image = game.assets["PC_SPRITE_3.png"];
				this.x = x;
				this.y = y;
				this.frame = 5;
				this.addEventListener(Event.ENTER_FRAME, function() {
					if (this.intersect(pc)){
						game.rootScene.removeChild(this);
					}});
				game.rootScene.addChild(this);
		}
		});
  
		for (var i = 0; i < map.collisionData.length; i++) { 
			for (var k = 0; k < 21; k++){
				if (map.collisionData[i][k] === 0) {
					new Dot(k*8, i*8);
				};
			}
		}
	}
	game.start();
}